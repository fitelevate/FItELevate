// Generated by view binder compiler. Do not edit!
package com.developer.fitelevate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.developer.fitelevate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityStretchingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout ccpose;

  @NonNull
  public final LinearLayout chair;

  @NonNull
  public final LinearLayout childpose;

  @NonNull
  public final LinearLayout cobstretch;

  @NonNull
  public final LinearLayout dntochest;

  @NonNull
  public final LinearLayout fwbend;

  @NonNull
  public final LinearLayout kneetochest;

  @NonNull
  public final LinearLayout shstretch;

  @NonNull
  public final LinearLayout ssbend;

  @NonNull
  public final Toolbar toolbaar;

  @NonNull
  public final LinearLayout wthedog;

  private ActivityStretchingBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout ccpose,
      @NonNull LinearLayout chair, @NonNull LinearLayout childpose,
      @NonNull LinearLayout cobstretch, @NonNull LinearLayout dntochest,
      @NonNull LinearLayout fwbend, @NonNull LinearLayout kneetochest,
      @NonNull LinearLayout shstretch, @NonNull LinearLayout ssbend, @NonNull Toolbar toolbaar,
      @NonNull LinearLayout wthedog) {
    this.rootView = rootView;
    this.ccpose = ccpose;
    this.chair = chair;
    this.childpose = childpose;
    this.cobstretch = cobstretch;
    this.dntochest = dntochest;
    this.fwbend = fwbend;
    this.kneetochest = kneetochest;
    this.shstretch = shstretch;
    this.ssbend = ssbend;
    this.toolbaar = toolbaar;
    this.wthedog = wthedog;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityStretchingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityStretchingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_stretching, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityStretchingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ccpose;
      LinearLayout ccpose = ViewBindings.findChildViewById(rootView, id);
      if (ccpose == null) {
        break missingId;
      }

      id = R.id.chair;
      LinearLayout chair = ViewBindings.findChildViewById(rootView, id);
      if (chair == null) {
        break missingId;
      }

      id = R.id.childpose;
      LinearLayout childpose = ViewBindings.findChildViewById(rootView, id);
      if (childpose == null) {
        break missingId;
      }

      id = R.id.cobstretch;
      LinearLayout cobstretch = ViewBindings.findChildViewById(rootView, id);
      if (cobstretch == null) {
        break missingId;
      }

      id = R.id.dntochest;
      LinearLayout dntochest = ViewBindings.findChildViewById(rootView, id);
      if (dntochest == null) {
        break missingId;
      }

      id = R.id.fwbend;
      LinearLayout fwbend = ViewBindings.findChildViewById(rootView, id);
      if (fwbend == null) {
        break missingId;
      }

      id = R.id.kneetochest;
      LinearLayout kneetochest = ViewBindings.findChildViewById(rootView, id);
      if (kneetochest == null) {
        break missingId;
      }

      id = R.id.shstretch;
      LinearLayout shstretch = ViewBindings.findChildViewById(rootView, id);
      if (shstretch == null) {
        break missingId;
      }

      id = R.id.ssbend;
      LinearLayout ssbend = ViewBindings.findChildViewById(rootView, id);
      if (ssbend == null) {
        break missingId;
      }

      id = R.id.toolbaar;
      Toolbar toolbaar = ViewBindings.findChildViewById(rootView, id);
      if (toolbaar == null) {
        break missingId;
      }

      id = R.id.wthedog;
      LinearLayout wthedog = ViewBindings.findChildViewById(rootView, id);
      if (wthedog == null) {
        break missingId;
      }

      return new ActivityStretchingBinding((LinearLayout) rootView, ccpose, chair, childpose,
          cobstretch, dntochest, fwbend, kneetochest, shstretch, ssbend, toolbaar, wthedog);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
